// <auto-generated />
using System;
using System.Collections.Generic;
using CloudSync.Infrastructure;
using CloudSync.Modules.EmployeeManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloudSync.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloudSync.Modules.CandidateManagement.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("availability_date");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("city");

                    b.Property<string>("CoverLetterUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cover_letter_url");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date_time");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("education_level");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("first_name");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("git_hub_url");

                    b.Property<DateTime?>("InterviewDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("interview_date_time");

                    b.Property<int?>("InterviewerId")
                        .HasColumnType("integer")
                        .HasColumnName("interviewer_id");

                    b.Property<List<Employee>>("Interviewers")
                        .HasColumnType("jsonb")
                        .HasColumnName("interviewers");

                    b.Property<string>("JobAppliedFor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("job_applied_for");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_name");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("linked_in_url");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("OnboardingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("onboarding_date");

                    b.Property<string>("PersonalWebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("personal_website_url");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("RecruitingSource")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("recruiting_source");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("resume_url");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("time_zone");

                    b.Property<List<string>>("UniversitiesAttended")
                        .HasColumnType("jsonb")
                        .HasColumnName("universities_attended");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date_time");

                    b.Property<string>("WorkAuthorizationType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("work_authorization_type");

                    b.HasKey("Id")
                        .HasName("pk_candidate");

                    b.HasIndex("InterviewerId")
                        .HasDatabaseName("ix_candidate_interviewer_id");

                    b.ToTable("candidate", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_department_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("ParentDepartmentId")
                        .HasDatabaseName("ix_departments_parent_department_id");

                    b.ToTable("departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Executive",
                            ParentDepartmentId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Consulting",
                            ParentDepartmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Onboarding",
                            ParentDepartmentId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Offboarding",
                            ParentDepartmentId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Recruiting",
                            ParentDepartmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 11,
                            Name = "AI",
                            ParentDepartmentId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Applications Development",
                            ParentDepartmentId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cybersecurity",
                            ParentDepartmentId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "SEO",
                            ParentDepartmentId = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Web Development",
                            ParentDepartmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Market Research",
                            ParentDepartmentId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "Social Media",
                            ParentDepartmentId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Copywriting",
                            ParentDepartmentId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Graphic Design",
                            ParentDepartmentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Operations"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Finance",
                            ParentDepartmentId = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Legal",
                            ParentDepartmentId = 5
                        });
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("CoverLetterUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cover_letter_url");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("git_hub_url");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("linked_in_url");

                    b.Property<string>("PersonalWebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("personal_website_url");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("resume_url");

                    b.HasKey("Id")
                        .HasName("pk_employee_documents");

                    b.ToTable("employee_documents", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<List<string>>("DegreesEarned")
                        .HasColumnType("jsonb")
                        .HasColumnName("degrees_earned");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("education_level");

                    b.Property<List<string>>("UniversitiesAttended")
                        .HasColumnType("jsonb")
                        .HasColumnName("universities_attended");

                    b.HasKey("Id")
                        .HasName("pk_employee_educations");

                    b.ToTable("employee_educations", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeLegal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("IdCountry")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("id_country");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("id_number");

                    b.Property<string>("IdState")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("id_state");

                    b.Property<string>("IdType")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("id_type");

                    b.Property<DateTime?>("VisaExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visa_expiration_date");

                    b.Property<string>("VisaNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("visa_number");

                    b.Property<string>("WorkAuthorizationDocumentUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("work_authorization_document_url");

                    b.Property<string>("WorkAuthorizationType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("work_authorization_type");

                    b.Property<DateTime?>("WorkExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("work_expiration_date");

                    b.Property<string>("WorkPermitNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("work_permit_number");

                    b.HasKey("Id")
                        .HasName("pk_employee_legals");

                    b.ToTable("employee_legals", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("CoachId")
                        .HasColumnType("integer")
                        .HasColumnName("coach_id");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("EmploymentStatus")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("employment_status");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("employment_type");

                    b.Property<string>("HierarchyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hierarchy_level");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("OffboardingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("offboarding_date");

                    b.Property<DateTime?>("OnboardingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("onboarding_date");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("termination_date");

                    b.Property<string>("PositionName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position_name");

                    b.Property<string>("RecruitingSource")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("recruiting_source");

                    b.Property<int?>("SubDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("sub_department_id");

                    b.HasKey("Id")
                        .HasName("pk_employee_positions");

                    b.HasIndex("CoachId")
                        .HasDatabaseName("ix_employee_positions_coach_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_employee_positions_department_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_employee_positions_manager_id");

                    b.HasIndex("SubDepartmentId")
                        .HasDatabaseName("ix_employee_positions_sub_department_id");

                    b.ToTable("employee_positions", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeRecruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("RecruitingSource")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("recruiting_source");

                    b.Property<string>("InterviewFeedback")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("interview_feedback");

                    b.Property<string>("ApplicantStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("applicant_status");

                    b.Property<string>("ContractLength")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contract_length");

                    b.Property<string>("OfferDetails")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("offer_details");

                    b.Property<string>("BackgroundCheckStatus")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("background_check_status");

                    b.Property<string>("TalentPipelineStage")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("talent_pipeline_stage");

                    b.Property<string>("HireTime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hire_time");

                    b.Property<string>("HireCost")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hire_cost");

                    b.Property<bool>("InternationalParticipation")
                        .HasColumnType("boolean")
                        .HasColumnName("international_participation");

                    b.HasKey("Id")
                        .HasName("pk_employee_recruitments");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_employee_recruitments_manager_id");

                    b.HasIndex("SubDepartmentId")
                        .HasDatabaseName("ix_employee_positions_sub_department_id");

                    b.ToTable("employee_recruitments", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<List<string>>("CanvasCertificates")
                        .HasColumnType("jsonb")
                        .HasColumnName("canvas_certificates");

                    b.Property<List<string>>("CanvasCoursesCompleted")
                        .HasColumnType("jsonb")
                        .HasColumnName("canvas_courses_completed");

                    b.Property<string>("NewCompany")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("new_company");

                    b.Property<List<string>>("OnboardingChecklist")
                        .HasColumnType("jsonb")
                        .HasColumnName("onboarding_checklist");

                    b.HasKey("Id")
                        .HasName("pk_employee_trainings");

                    b.ToTable("employee_trainings", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.ProjectTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_teams");

                    b.ToTable("project_teams", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("ProjectTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("project_team_id");

                    b.Property<string>("RoleInTeam")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("role_in_team");

                    b.HasKey("Id")
                        .HasName("pk_team_members");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_team_members_employee_id");

                    b.HasIndex("ProjectTeamId")
                        .HasDatabaseName("ix_team_members_project_team_id");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.InvitedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int>("InvitedByEmployeeId")
                        .HasMaxLength(255)
                        .HasColumnType("integer")
                        .HasColumnName("invited_by_employee_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_invited_users");

                    b.HasIndex("InvitedByEmployeeId")
                        .HasDatabaseName("ix_invited_users_invited_by_employee_id");

                    b.ToTable("invited_users", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("GoogleUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("google_user_id");

                    b.Property<DateTime>("LastLoginDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UserSettings")
                        .HasColumnType("jsonb")
                        .HasColumnName("user_settings");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_users_employee_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Shared.Responses.UserManagement.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastLoginDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date_time");

                    b.Property<string>("UserSettings")
                        .HasColumnType("text")
                        .HasColumnName("user_settings");

                    b.HasKey("Id")
                        .HasName("pk_user_response");

                    b.ToTable("user_response", (string)null);
                });

            modelBuilder.Entity("CloudSync.Modules.CandidateManagement.Models.Candidate", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .HasConstraintName("fk_candidate_employees_interviewer_id");

                    b.Navigation("Interviewer");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.Department", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .HasConstraintName("fk_departments_departments_parent_department_id");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.Employee", b =>
                {
                    b.OwnsOne("CloudSync.Modules.EmployeeManagement.Models.EmployeeBasic", "BasicInfo", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("BirthCity")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_birth_city");

                            b1.Property<string>("BirthCountry")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_birth_country");

                            b1.Property<DateTime?>("BirthDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("basic_info_birth_date");

                            b1.Property<string>("BirthState")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_birth_state");

                            b1.Property<string>("Ethnicity")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_ethnicity");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_first_name");

                            b1.Property<string>("Gender")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_gender");

                            b1.Property<string>("LastName")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_last_name");

                            b1.Property<string>("MaritalStatus")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("basic_info_marital_status");

                            b1.Property<string>("Nationality")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_nationality");

                            b1.Property<string>("PreferredName")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_preferred_name");

                            b1.Property<string>("PreferredPronouns")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("basic_info_preferred_pronouns");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId")
                                .HasConstraintName("fk_employees_employees_id");
                        });

                    b.OwnsOne("CloudSync.Modules.EmployeeManagement.Models.EmployeeContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("EmergencyContactName")
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("contact_info_emergency_contact_name");

                            b1.Property<string>("EmergencyContactPhone")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("contact_info_emergency_contact_phone");

                            b1.Property<string>("InternationalPhone")
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("contact_info_international_phone");

                            b1.Property<string>("InternationalPhoneType")
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("contact_info_international_phone_type");

                            b1.Property<string>("PersonalEmail")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("contact_info_personal_email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("contact_info_phone");

                            b1.Property<string>("ProjxonEmail")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("contact_info_projxon_email");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId")
                                .HasConstraintName("fk_employees_employees_id");

                            b1.OwnsOne("CloudSync.Modules.EmployeeManagement.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("EmployeeContactInfoEmployeeId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("AddressLine1")
                                        .HasMaxLength(80)
                                        .HasColumnType("character varying(80)")
                                        .HasColumnName("contact_info_address_address_line1");

                                    b2.Property<string>("AddressLine2")
                                        .HasMaxLength(80)
                                        .HasColumnType("character varying(80)")
                                        .HasColumnName("contact_info_address_address_line2");

                                    b2.Property<string>("City")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("contact_info_address_city");

                                    b2.Property<string>("Country")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("contact_info_address_country");

                                    b2.Property<string>("PostalCode")
                                        .HasMaxLength(15)
                                        .HasColumnType("character varying(15)")
                                        .HasColumnName("contact_info_address_postal_code");

                                    b2.Property<string>("StateOrProvince")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("contact_info_address_state_or_province");

                                    b2.Property<string>("TimeZone")
                                        .HasMaxLength(30)
                                        .HasColumnType("character varying(30)")
                                        .HasColumnName("contact_info_address_time_zone");

                                    b2.HasKey("EmployeeContactInfoEmployeeId");

                                    b2.ToTable("employees");

                                    b2.WithOwner()
                                        .HasForeignKey("EmployeeContactInfoEmployeeId")
                                        .HasConstraintName("fk_employees_employees_id");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.Navigation("BasicInfo")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeDocuments", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("Documents")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeeDocuments", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_documents_employees_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeEducation", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("Education")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeeEducation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_educations_employees_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeLegal", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("Legal")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeeLegal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_legals_employees_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeePosition", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .HasConstraintName("fk_employee_positions_employees_coach_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_employee_positions_departments_department_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("PositionDetails")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeePosition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_positions_employees_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_employee_positions_employees_manager_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Department", "SubDepartment")
                        .WithMany()
                        .HasForeignKey("SubDepartmentId")
                        .HasConstraintName("fk_employee_positions_departments_sub_department_id");

                    b.Navigation("Coach");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeRecruitment", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("Recruitment")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeeRecruitment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_recruitments_employees_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_employee_recruitments_employees_manager_id");

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.EmployeeTraining", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithOne("Training")
                        .HasForeignKey("CloudSync.Modules.EmployeeManagement.Models.EmployeeTraining", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_trainings_employees_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.TeamMember", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_employees_employee_id");

                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.ProjectTeam", "ProjectTeam")
                        .WithMany()
                        .HasForeignKey("ProjectTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_project_teams_project_team_id");

                    b.Navigation("Employee");

                    b.Navigation("ProjectTeam");
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.InvitedUser", b =>
                {
                    b.HasOne("Shared.Responses.UserManagement.UserResponse", "InvitedByEmployee")
                        .WithMany()
                        .HasForeignKey("InvitedByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invited_users_user_response_invited_by_employee_id");

                    b.Navigation("InvitedByEmployee");
                });

            modelBuilder.Entity("CloudSync.Modules.UserManagement.Models.User", b =>
                {
                    b.HasOne("CloudSync.Modules.EmployeeManagement.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_employees_employee_id");

                    b.HasOne("CloudSync.Modules.UserManagement.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloudSync.Modules.EmployeeManagement.Models.Employee", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Education");

                    b.Navigation("Legal");

                    b.Navigation("PositionDetails");

                    b.Navigation("Training");
                });
#pragma warning restore 612, 618
        }
    }
}
